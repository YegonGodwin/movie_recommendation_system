my_country <- function(country = "Norway"){
paste("I am from", country)
}
my_country("Kenya")
my_country("Uganda")
my_country("U.S.A.")
my_country()
return a
return (a)
OuterFunc <- function(x){
InnerFunc <- function(y){
a <- x+y
return (a)
}
return (InnerFunc)
}
output <- OuterFunc(3)
output()
output(5)
nested <- function(s, t){
b <- s+ t
return(b)
}
output <- paste(nested(2,3), nested(3, 4))
nested(nested(2,3), nested(3, 4))
else{
k ==0
#Recursion function
tri_recursion <- function(k){
if(k>0){
result <- k +tri_recursion(k-1)
print(result)
}
else{
k ==0
return(result)
}
}
tri_recursion(7)
if(k>0){
result <- k +tri_recursion(k-1)
print(result)
}
#Recursion function
tri_recursion <- function(k){
if(k>0){
result <- k +tri_recursion(k-1)
print(result)
}
else{
result ==0
return(result)
}
}
tri_recursion(7)
#Recursion function
tri_recursion <- function(k){
if(k>0){
result <- k +tri_recursion(k-1)
print(result)
}
else{
result = 0
return(result)
}
}
tri_recursion(7)
name <- readline(prompt = "Enter your name: ")
print(paste("My name is ", name, " and am ", age, " years old"))
name <- readline(prompt = "Enter your name: ")
name <- readline(prompt = "Enter your name: ")
age <- readline(prompt = "Age")
print(paste("My name is ", name, " and am ", age, " years old"))
lang <- "python and R"
nums <- c(10, 20, 83, 362, 989)
l2 <- 78
print(ls())
print(ls().str())
print(ls.str())
clear()
vector1 <- c("Hello", "world", "People")
vector1
v2 <- list("Banana", "Apple")
v2
numbers <- c(12, 13, 34, 45, 54, 64, 86)
len(numbers)
lenght <- list(23, 55, 343, 65)
len(lenght)
lenght <- list(23, 55, 343, 65)
len(lenght)
letters <- c("a", "c", "h", "k", "l", "m", "z")
numbers <- c(12, 13, 34, 45, 54, 64, 86)
mixed <- paste(numbers, letters)
mixed
print(mixed)
mixed <- c(numbers, letters)
print(mixed)
class(mixed)
fac <- as.factor(mixed)
fac
typeof(fac)
class(fac)
lenght(numbers)
lenght(numbers)
lenght(numbers)
numbers <- c(12, 13, 34, 45, 54, 64, 86)
lenght(numbers)
#sorting a vector and a string
sort(x = numbers, decreasing = FALSE)
sort(x=letters, decreasing = TRUE)
#ACCESSING A VECTOR ELEMENT
element[1] <- numbers[0]
#ACCESSING A VECTOR ELEMENT
element[1] <- numbers[1]
#ACCESSING A VECTOR ELEMENT
element <- numbers[1]
element
numbers
#for string
string <- letters[0]
string
#for string
string <- letters[1]
string
numbers[-1]
numbers[1,3]
numbers[c(1, 3)]
letters[-1]
#repeat the vector
repeat_vector <- letters[c(2, 4)]
repeat_vector
letters
#repeat the vector
repeat_vector <- rep(letters[C(2, 3, 4)], each=3)
#repeat the vector
repeat_vector <- rep(lettersC(2, 3, 4), each=3)
#repeat the vector
repeat_vector <- rep(c(2, 3, 4), each=3)
repeat_vector
#repeat the vector
repeat_vector <- rep(letters[c(2, 3, 4)], each=3)
repeat_vector
#repeat the vector
repeat_vector <- rep(letters[c(1, 2, 3)], each=3)
repeat_vector
print(ls)
print(ls())
ls()
ls.str()
#vector operations
v1 <- c("A", "Ice", "Frost", 393)
v1
class(v1)
v2 <- c(47, 498, 79, 70, 87)
lenght(v2)
v2 <- c(47, 498, 79, 70, 87)
lenght(v2)
list1 <- list[45, 98, 478, 989]
list1 <- list(45, 98, 478, 989)
list1
lenght(list1)
list1[0]
list1[1]
#@lenght(list1)
v1[1]
v1[c(2,3)]
v1[c(2,"and", 3)]
v1[paste(c(2,3))]
#modify index 1 of the vector
v1[1] <- c("my name is")
v1
v1[1]
v1[c(1, 2,3)]
numbers <- 1.5:7.6
numbers
numbers <- 1.3:7.3
numbers
lenght(numbers)
lenght(v1)
lenght(v2)
sort(x = v2, decreasing = FALSE)
sort(v1)
#checking if an item in the list exist
"Frost" %in%v1
78 %in%v2
87 %in%v2
#Adding an item into the list
append(x = "Starlabs", values = "Stardust", after = "Frost", v1)
#Adding an item into the list
append(x=v1, values = "Stardust", after = "Frost", v1)
#Adding an item into the list
append(x=v1, values = "Stardust", after = "Frost")
append("starlabs", v1)
#Adding an item into the list
append(x=v1, values = "Stardust")
v1
append(v1, "starlabs")
v1
append(v1, "starlabs", after = 2)
v1
newv1 <- v1[-1]
newv1
newv1 <- v1[1]
newv1
print(i)
for (i in v2){
print(i)
}
for (i in v2){
sort(v2)
print(i)
}
sort(i)
for (i in v2){
sort(i)
print(i)
}
sort(i)
matrix1 <- matrix(c(1, 2,3,4,5), cols=2, rows=3)
matrix1 <- matrix(c(1, 2,3,4,5), ncol=2, nrow=3)
matrix1 <- matrix(c(1, 2,3,4,5), ncol=3, nrow=2)
matrix1
#string matrix
stringMatrix <- matrix(c("Apple", "Mango", "Banana", "Pineapple"), ncol = 3, nrow=3)
stringMatrix
#string matrix
stringMatrix <- matrix(c("Apple", "Mango", "Banana", "Pineapple"), ncol = 2, nrow=2)
stringMatrix
matrix1 <- matrix(c(1, 2,3,4,5, 6, 7, 8), ncol=4, nrow=2)
matrix1
stringMatrix[2, 1]
matrix1[2, 1]
stringMatrix[2, ]
matrix1[2, ]
matrix1[, 2]
stringMatrix[, 4]
stringMatrix[, 2]
names(test) <- c("Products", "count", "rating")
#list data frame
list1 <- list(x=c(10, 20, 30),
y=c("a", "b", "c"),
z=c(TRUE, FALSE)
)
print(list1)
matrix(1:5, nrow=2, ncol=2)
matrix(1:8, nrow=2, ncol=4)
matrix(1:8, nrow=4, ncol=2)
cbind(:3, 1:2)
cbind(1:3, 1:2)
cbind(1:2, 1:2)
n <- matrix(1:6, byrow = TRUE, nrow=2)
n
rbind(n, 7:9)
x <- matrix(1:6, ncol=2)
x
l = matrix(LETTERS(1:6), ncol = 4)
l = matrix(LETTERS(1:6), ncol = 4, nrow=2)
l
l = matrix(LETTERS[1:6] ncol = 4, nrow=3)
l = matrix(LETTERS(1:6) ncol = 4, nrow=3)
l
l = matrix(LETTERS(1:6) ncol = 3, nrow=4)
y = matrix(LETTERS(1:6) nrow = 4, ncol=3)
y
y = matrix(LETTERS[1:6] nrow = 4, ncol=3)
y
yl <- matrix(LETTERS[1:6], nrow=4, ncol=3)
yl
l <- matrix(LETTERS[1:6], ncol = 3, nrow = 4)
l
class(yl)
BMI <- data.frame(
gender <- c("male", "female", "male"),
height(m) <- c(45.7, 120.85, 100.6),
weight(kg) <- c(47, 78.4, 67),
Age <- c(16, 28, 23)
)
BMI <- data.frame(
gender <- c("male", "female", "male"),
height <- c(45.7, 120.85, 100.6),
weight <- c(47, 78.4, 67),
Age <- c(16, 28, 23)
)
BMI
print(BMI)
gender <- c("male", "feamle", "female", "male")
height <- c(67.8, 98.3, 59.6, 78.3)
age <- c(17, 34, 23, 26)
#create a dataframe
df <- data.frame(gender, weight, age)
df
#create a dataframe
df <- data.frame(gender, height, age)
df
weight <- c(56, 89, 64, 78)
df$weight <- weight
df
children <- c(TRUE, FALSE, TRUE, FALSE)
df$children[2] <- children
print(df)
df$children <- children
print(df)
print(df$gender)
#dim() function
dim(df)
#matrix lenght
lenght(df)
#matrix lenght
length(df)
#loop through matrix
thisMatrix<- matrix( c(67.8, 98.3, 59.6, 78.3), ncol=2, nrow=2)
for (rows in 1:nrow(thisMatrix)){
for (cols in 1:ncol(thisMatrix))
print(thisMatrix[rows, cols])
}
df
summary(df)
cor(df$height)
cor(df)
cor(df$age)
cor(df$age, df$age)
cor(df$height, df$weight)
cov(df$age, df$weight)
#Hypothesis testing
t.test(df$weight, df$age)
install.packages("caret")
library(caret)
library(caret)
df
df['gender', 'age']
df['gender']
df$gender, df$age
mean(df$weight)
df[3,]
df[,2]
df[4, "age"]
df[3, df$age]
df[["age"]]
lenght(df)
Id <- c(001, 002, 003, 004)
df$ID <- Id
df.head(2)
head(df)
rbind(df, "male", 80, 29, 78, FALSE, 005)
tom <- data.frame("male", 80, 29, 78, FALSE, 005)
rbind(df, tom)
df
tom <- data.frame("male", 80, 29)
rbind(df, tom)
df
tom <- data.frame("male", 80, 29, 78, 'FALSE', 5)
rbind(df, tom)
tom
ranks <- order(df$weight)
ranks
sort(df$weight)
df[3, ranks]
df[ranks]
df[ranks,]
#Arrays
array1 <- c(1:5)
thisarray <- array(array1, data(1,3,5,7))
#Arrays
array1 <- c(1:20)
thisarray <- array(array1, dim = 4,3,2)
thisarray <- array(array1, dim = c(4,3,2))
thisarray
#accessing an array
access <- thisarray[2,3,4]
#accessing an array
access <- thisarray[2,3,2]
access
#accessing an array
access <- thisarray[2,1,2]
access
#accessing an array
access <- thisarray[1,2,1]
access
#The syntax is as follow: array[row position, column position, matrix level]
#access items in the first row at matrix level one
items <- thisarray[c(1), 1]
#The syntax is as follow: array[row position, column position, matrix level]
#access items in the first row at matrix level one
items <- thisarray[c(1),, 1]
items
itemscol <- thisarray[,,c(2), 2]
itemscol <- thisarray[,,c(2) 2]
itemscol <- thisarray[,c(2), 2]
itemscol
5 %in% thisarray
20 %in% thisarray
21 %in% thisarray
#dim() function
dim(thisarray)
#arraylenght
lenght(thisarray)
array2 <- c(1:12)
multiArray <- array(array2, dim=c(2,3,2))
multiArray
multiArray[,c(2), 1]
multiArray[c(2), 2]
multiArray[c(2),, 2]
for (i in multiArray){
print(i)
}
BMI
#summarize my data
summary(df)
df
col(df)
tom <- data.frame(gender="male", height=80, age=29, weight=78, children='FALSE', ID=5)
rbind(df, tom)
#column names outputting
colnames(df)
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other"),
Pulse = c(100, 150, 120),
Duration = c(60, 30, 45)
)
#add a column
age <- c(23, 20, 19)
Data_Frame$age <- age
#add a row
newdata_Frame <- Data_Frame(Training ="Body Build", Pulse=126, Duration=70)
Data_Frame <- data.frame (
Training = c("Strength", "Stamina", "Other"),
Pulse = c(100, 150, 120),
Duration = c(60, 30, 45)
)
Data_Frame
newdata_Frame <- Data_Frame(Training ="Body Build", Pulse=126, Duration=70)
newdata_Frame <- data_frame(Training ="Body Build", Pulse=126, Duration=70)
#add a row
newdata_Frame <- data.frame(Training ="Body Build", Pulse=126, Duration=70)
Data_Frame <- rbind(Data_Frame, newdata_Frame)
# Print the data frame
Data_Frame
x
y
A <- c("A", "B", "C", "D")
values <- c(340, 780, 709, 120)
barplot(values)
pie(values, labels = A, col = c("red", "lightblue", "green", "orange"))
legend("topright", labels=A)
visuals <- c("red", "lightblue", "blue", "orange")
barplot(values, names.arg = A, col = visuals)
barplot(values, names.arg = A, col = visuals, density = 98)
barplot(values, names.arg = A, col = visuals, density = 98, main="Bar plot")
barplot(values, names.arg = A, col = visuals, main="Bar plot")
pie(values, labels = A, col = c("red", "lightblue", "green", "orange"), main="Pie chart")
legend("topright", A, fill=visuals)
pie(values, labels = A, col = c("red", "lightblue", "blue", "orange"), main="Pie chart")
legend("topright", A, fill=visuals)
#create a function
nameFunction <- function(lname){
paste(lname, "Yegon")
}
nameFunction("Godwin")
nameFunction("Desmond")
my_country <- function(country = "Norway"){
paste("I am from", country)
}
my_country("Kenya")
my_country("Uganda")
my_country("U.S.A.")
my_country() #default value set
OuterFunc <- function(x){
InnerFunc <- function(y){
a <- x+y
return (a)
}
return (InnerFunc)
}
output <- OuterFunc(3)
output(5)
nested <- function(s, t){
b <- s+ t
return(b)
}
nested(nested(2,3), nested(3, 4))
#Recursion function
tri_recursion <- function(k){
if(k>0){
result <- k +tri_recursion(k-1)
print(result)
}
else{
result = 0
return(result)
}
}
tri_recursion(7)
name <- readline(prompt = "Enter your name: ")
print(paste("My name is ", name, " and am ", age, " years old"))
lang <- "python and R"
nums <- c(10, 20, 83, 362, 989)
l2 <- 78
print(ls())
print(ls.str())
vector1 <- c("Hello", "world", "People")
vector1
v2 <- list("Banana", "Apple")
v2
shiny::runApp('D:/R programming/DataCamp/Deployed')
git innit
gitcreds::
install.packages('gitcreds::')
git config --global user.name "YegonGodwin"
getwd()
setwd('D:/R programming/DataCamp/Deployed')
getwd()
git init
